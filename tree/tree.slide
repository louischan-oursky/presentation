# An application of tree

Louis Chan
17 Nov 2023
louischan@oursky.com

## What is a tree

- A tree consists of nodes.
- Each node has **exactly one** parent.
- The root node has **NO** parent.

## An image of a tree

<figure style="display: flex; flex-direction: column;">
  <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Tree_%28computer_science%29.svg/440px-Tree_%28computer_science%29.svg.png" style="height: 400px; object-fit: contain;">
  <figcaption>An image borrowed from <a href="https://en.wikipedia.org/wiki/Tree_(data_structure)">https://en.wikipedia.org/wiki/Tree_(data_structure)</a></figcaption>
</figure>

## A typical tree definition on textbook

```
type Node struct {
  Data     any
  Children []*Node
}
```

```
&Node{ Data: 2, Children: []*Node{
  { Data: 7, Children: []*Node{
    { Data: 2 },
    { Data: 10 },
    { Data: 6, Children: []*Node{
      { Data: 5 },
      { Data: 11 },
    }},
  }},
  { Data: 5, Children: []*Node{
    { Data: 9, Children: []*Node{
      { Data: 4 },
    }},
  }},
}}
```

## Real world tree

Real world tree **does not** look like the one on textbook.

- Abstract Syntax Tree
  - [https://pkg.go.dev/text/template/parse#Tree](https://pkg.go.dev/text/template/parse#Tree)
  - [https://pkg.go.dev/go/ast#File](https://pkg.go.dev/go/ast#File)
- DOM tree
  - [https://developer.mozilla.org/en-US/docs/Web/API/Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)

## Some applications of tree in Authgear

Authentication Flow

- A recent feature of Authgear.
- Customize authentication flows **by configuration**.
- Execute **arbitrary** authentication flow.

## Authentication flow configuration

```
name: default
steps:
- type: identify
  one_of:
  - identification: email
    steps:
    - type: authenticate
      one_of:
      - authentication: primary_password
        steps:
        - type: authenticate
          optional: true
          one_of:
          - authentication: secondary_totp
  - identification: phone
    steps:
    - type: authenticate
      one_of:
      - authentication: primary_oob_otp_sms
```

- `one_of` and `steps`.
- [Link](https://github.com/authgear/authgear-server/blob/main/pkg/lib/config/authentication_flow.go#L895)

## Application 1: How do we keep track of the progress of the flow?

- We want to locate the current step in the flow configuration.
- We use [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901) to do this.

## ðŸ¤”

Isn't your configuration written in YAML, instead of in JSON?
- YAML is a superset of JSON. [https://github.com/kubernetes-sigs/yaml](https://github.com/kubernetes-sigs/yaml)

## What is a JSON Pointer?

- A notation to traverse a JSON document (a tree).
- A list of **reference token** e.g. `/steps`, `/1`.
- An empty JSON Pointer points to the root of the JSON document.
- Each reference token traverses **one** level down.

## Traverse a JSON Pointer - 1

- Traversed:
- Remaining: `/steps/0/one_of/1/steps/0/one_of/0`

```
name: default
steps:
- type: identify
  one_of:
  - identification: email
    steps:
    - type: authenticate
      one_of:
      - authentication: primary_password
        steps:
        - type: authenticate
          optional: true
          one_of:
          - authentication: secondary_totp
  - identification: phone
    steps:
    - type: authenticate
      one_of:
      - authentication: primary_oob_otp_sms
```

## Traverse a JSON Pointer - 2

- Traversed: `/steps/0`
- Remaining: `/one_of/1/steps/0/one_of/0`

```
type: identify
one_of:
- identification: email
  steps:
  - type: authenticate
    one_of:
    - authentication: primary_password
      steps:
      - type: authenticate
        optional: true
        one_of:
        - authentication: secondary_totp
- identification: phone
  steps:
  - type: authenticate
    one_of:
    - authentication: primary_oob_otp_sms
```

## Traverse a JSON Pointer - 3

- Traversed: `/steps/0/one_of/1`
- Remaining: `/steps/0/one_of/0`

```
identification: phone
steps:
- type: authenticate
  one_of:
  - authentication: primary_oob_otp_sms
```

## Traverse a JSON Pointer - 4

- Traversed: `/steps/0/one_of/1/steps/0`
- Remaining: `/one_of/0`

```
type: authenticate
one_of:
- authentication: primary_oob_otp_sms
```

## Traverse a JSON Pointer - 5

- Traversed: `/steps/0/one_of/1/steps/0/one_of/0`
- Remaining:

```
authentication: primary_oob_otp_sms
```

## Takeaway 1: When you need to traverse a tree-like data structure dynamically......

You can consider using JSON Pointer, or something similar (e.g. [JsonPath](https://github.com/json-path/JsonPath))

## Authentication flow execution

```
type Flow struct {
  Intent     Intent
  Nodes      []Node
}

type Intent interface {}

type NodeType string
const NodeTypeSimple  NodeType = "SIMPLE"
const NodeTypeSubFlow NodeType = "SUB_FLOW"

type Node struct {
  Type    NodeType   `json:"type"`
  Simple  NodeSimple `json:"simple,omitempty"`
  SubFlow *Flow      `json:"flow,omitempty"`
}

type NodeSimple interface {}
```

- [Flow](https://github.com/authgear/authgear-server/blob/main/pkg/lib/authenticationflow/workflow.go#L3)
- [Node](https://github.com/authgear/authgear-server/blob/main/pkg/lib/authenticationflow/node.go#L10)

## Authentication flow execution, with JSON Pointer

```
&Flow{
  Intent: &LoginIntent{},
  Nodes: []Node{
    Node{
      Type: NodeTypeSubFlow,
      SubFlow: &Flow{
        Intent: IdentifyIntent{
          JSONPointer: "/steps/0",
        },
        Nodes: []Node{
          Node{
            Type: NodeTypeSimple,
            Simple: &NodeUseIdentityLoginID{
              JSONPointer: "/steps/0/one_of/1",
              LoginID: "+85298765432",
            },
          },
        },
      },
    },
  },
}
```

## Takeaway 2: Do not overload the purpose of data structure

- The configuration tree by itself is simple.
- Instead of overloading this tree to represent the execution, we invent a new one, and use JSON Pointer to associate them.

## Application 2: Order the effects of nodes - 1

Given this tree

```
&Flow{
  Intent: &SignupIntent{},
  Nodes: []Node{
    Node{
      Type: NodeTypeSimple,
      Simple: &NodeCreateUser{
        UserID: "user0",
      },
    },
    Node{
      Type: NodeTypeSimple,
      Simple: &NodeCreateIdentityLoginID{
        UserID: "user0",
        LoginID: "louischan@oursky.com",
      },
    },
    Node{
      Type: NodeTypeSimple,
      Simple: &NodeCreatePassword{
        UserID: "user0",
        Hash: "password-hash",
      },
    },
  },
}
```

## Application 2: Order the effects of nodes - 2

We want to have these effects in this order.

1. Run SQL statement `INSERT INTO user (id) VALUES ('user0');`
2. Run SQL statement `INSERT INTO login_id (user_id, login_id) VALUES ('user0', 'louischan@oursky.com');`
3. Run SQL statement `INSERT INTO password (user_id, hash) VALUES ('user0', 'password-hash');`
4. Call webhook `POST https://myapp.com/authgear/events/user.created`.

- 2 and 3 must happen after 1 because of foreign key constraint.
- 4 must happen after 1,2,3 because we need the changes committed in the database before we send the webhook.

## Application 2: Order the effects of nodes - 3

We define a specific tree traversal for this purpose.
- If it is a Flow, visit all children nodes, and then visit the intent.
- If it is a NodeSimple, visit it.
- If it is a SubFlow, recursively visit the flow.

[See it in action](https://go.dev/play/p/6yJwYSFPk92)

## Takeaway 3: Start with a standard data structure and evolve it to your needs

- Started off with a tree.
- Built the tree incrementally as the flow progresses.
- Realized some nodes have effect to perform.
- Discoverd this particular traversal order matches the original order of the nodes.

## Q & A
